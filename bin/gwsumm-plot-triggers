#!/home/detchar/opt/gwpysoft-2.7/bin/python

"""Plot the triggers for a given ETG and a given channel
"""

import argparse

from numpy import ndarray

from matplotlib import use
use('agg')
from matplotlib.colors import LogNorm

from glue.lal import Cache

from gwpy.segments import Segment
from gwpy.time import to_gps
from gwpy.plotter import EventTablePlot

from gwsumm.plot import (get_plot, rcParams)
from gwsumm.segments import get_segments
from gwsumm.triggers import (get_triggers, keep_in_segments)


def safe_eval(val):
    """Evaluate the given string as a line of python, if possible

    If the :meth:`eval` fails, a `str` is returned in stead.
    """
    try:
        return eval(val)
    except (NameError, SyntaxError):
        return str(val)


parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('channel')
parser.add_argument('gpsstart', type=to_gps)
parser.add_argument('gpsend', type=to_gps)
parser.add_argument('-e', '--etg', default='omicron',
                    help='name of ETG, default: %(default)s')
parser.add_argument('-t', '--epoch', type=to_gps,
                    help='Zero-time for plot, defaults to GPSSTART')
parser.add_argument('-x', '--tcolumn', default='time',
                    help='column for time, default: %(default)s')
parser.add_argument('-f', '--fcolumn', default='peak_frequency',
                    help='sngl_burst column for frequency: '
                         'default: %(default)s')
parser.add_argument('-c', '--color', default='snr',
                    help='sngl_burst column for colour: default: %(default)s')
parser.add_argument('-s', '--snr', default=0, type=float,
                    help='minimum SNR, default: %(default)s')
parser.add_argument('-p', '--plot-params', action='append', default=[],
                    help='extra plotting keyword argument --%%{arg}=%%{param}')
parser.add_argument('-o', '--output-file', default='trigs.png',
                    help='output file name, default: %(default)s')
parser.add_argument('-a', '--state', metavar='FLAG',
                    help='restrict triggers to active times for flag')
parser.add_argument('-l', '--cache-file',
                    help='cache file containing event trigger file references')
parser.add_argument('-C', '--columns', type=lambda x: x.split(','),
                    help='list of columns to read from files, default: all')
parser.add_argument('--tiles', action='store_true', default=False,
                    help='plot tiles instead of dots, default: %(default)s')

args = parser.parse_args()
if args.epoch is None:
    args.epoch = args.gpsstart
span = Segment(args.gpsstart, args.gpsend)

# format params
params = {}
for input_ in args.plot_params:
    key, val = input_.split('=', 1)
    params[key.strip('-')] = safe_eval(val)

# get segments
if args.state:
    segs = get_segments(args.state, [span], url='https://dqsegdb5.phy.syr.edu')

# read cache
if args.cache_file:
    with open(args.cache_file, 'rb') as f:
        cache = Cache.fromfile(f).sieve(segment=span)
    print("Read cache of %d files" % len(cache))
else:
    cache = None

# get triggers
trigs = get_triggers(args.channel, args.etg, [span], cache=cache,
                     columns=args.columns)
trigs = trigs[trigs['snr'] > args.snr]
if args.state:
    trigs = keep_in_segments(trigs[snrt], segs, etg=args.etg)
print("Read %d events for %s [%s]" % (len(trigs), args.channel, args.etg))

# plot
if args.tiles:
    plot = EventTablePlot(trigs, args.tcolumn, args.fcolumn, 'duration',
                          'bandwidth', epoch=args.epoch, color=args.color,
                          edgecolor='face', linewidth=0.8)
else:
    plot = EventTablePlot(trigs, args.tcolumn, args.fcolumn, epoch=args.epoch,
                          color=args.color, edgecolor='none', s=12)
ax = plot.gca()
map = ax.collections[0]

# set axes properties
ax.set_epoch(args.epoch)
ax.set_xlim(args.gpsstart, args.gpsend)
ax.set_ylabel('Frequency [Hz]')
ax.set_yscale('log')

# set mappable properties
vmin, vmax = params.pop('clim', (3, 50))
if params.pop('logcolor', True):
    map.set_norm(LogNorm(vmin=vmin, vmax=vmax))
if map._A is None:
    map._A = ndarray((0,))

# draw colorbar
clabel = params.pop('colorlabel', 'Signal-to-noise ratio (SNR)')
cmap = params.pop('cmap', get_plot('triggers').defaults.get('cmap',  'YlGnBu'))
plot.add_colorbar(mappable=map, ax=ax, label=clabel, cmap=cmap,
                  clim=(vmin, vmax))

for key, val in params.iteritems():
    try:
        getattr(ax, 'set_%s' % key)(val)
    except AttributeError:
        setattr(ax, key, val)

# add segments
if args.state:
    sax = plot.add_state_segments(segs, ax=ax, plotargs={'label': ' '})
    sax.set_epoch(args.epoch)

# save and exit
plot.save(args.output_file)
print('Plot saved to %s' % args.output_file)
